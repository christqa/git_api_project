# This is a basic workflow to help you get started with Actions

name: push-docker-to-registry-and-trigger-deploy

# Controls when the workflow will run
on:
  push:
    branches:
      - 'main'

  # Allows you to run this workflow manually from the Actions a tab
  workflow_dispatch:

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: 'us-east-2'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    timeout-minutes: 30

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Install yarn dependencies
      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Get version in package.json
        run: echo "::set-output name=app_version::`npm pkg get version | sed 's/"//g'`"
        id: get_package_json_version

      # create metadata file
      - name: Update version in metadata
        run: >
          echo "{\"version\":\"${{steps.get_package_json_version.outputs.app_version}}\", \"buildNumber\": \"${{github.run_number}}\"}"  > metadata.json

      # execute build and push script
      - name: execute docker build and push
        run: ./scripts/docker-build-and-push.sh
        id: build_and_push_docker_image

      - name: get trigger deploy github app token
        uses: tibdex/github-app-token@v1
        id: generate_token
        with:
          app_id: ${{ secrets.TRIGGER_DEPLOY_GITHUB_APP_ID }}
          private_key: ${{ secrets.TRIGGER_DEPLOY_GITHUB_APP_PRIVATE_KEY }}
          installation_id: 24973980
          repository: projectspectra/deployments

      - name: Trigger new deployment
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: update-dev-api-deployment
          repo: projectspectra/deployments
          token: ${{ steps.generate_token.outputs.token }}
          ref: refs/heads/main
          inputs: '{ "image_tag": "${{steps.build_and_push_docker_image.outputs.docker_image_tag}}" }'

      - name: Slack notification Onfailure
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }} # required
          fields: repo,commit,ref,eventName,author
          text: "Build ${{ github.run_number }} has failed:exclamation::exclamation:\nLast commit: ${{ github.event.commits[0].message}}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_BACKEND_BUILDS_WEBHOOK }}
        if: failure()

  sonarqube:
    name: SpectraSonarqube
    runs-on: ubuntu-latest-4core
    env:
      NODE_OPTIONS: --max-old-space-size=10240
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Get the instance IP
      - name: Get Github action IP
        id: ip
        run: echo "ipv4=`curl ipv4.icanhazip.com`" >> $GITHUB_OUTPUT

      # Configure AWS Env Variables
      - name: Set environement variables
        run: |
          echo "AWS_DEFAULT_REGION=us-east-1" >> $GITHUB_ENV
          echo "AWS_SG_ID=sg-0db7cb1e3ed246bd6" >> $GITHUB_ENV

      # Add the instance IP to the AWS Security Group
      - name: Add Github Actions IP to Security group
        run: |
          aws ec2 authorize-security-group-ingress --group-id ${{ env.AWS_SG_ID }} --protocol tcp --port 443 --cidr ${{ steps.ip.outputs.ipv4 }}/32
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION }}

        # Install Yarn dependencies
      - name: Install dependencies
        run: yarn install --frozen-lockfile

        # Generate eslint report for sonarqube
      - name: generate eslint report for sonarqube
        run: yarn lint:generate-report

        # Run unit tests to generate coverage info
      - name: Run unit tests
        run: yarn test:coverage

        # Running Code Analysis
      - name: Sonarqube code Analysis
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # Remove instance IP from AWS Whitelist (use if always clause to ensure it runs even if tests fail)
      - name: Remove Github Actions IP from security group
        run: |
          aws ec2 revoke-security-group-ingress --group-id ${{ env.AWS_SG_ID }} --protocol tcp --port 443 --cidr ${{ steps.ip.outputs.ipv4 }}/32
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION }}
        if: always()
